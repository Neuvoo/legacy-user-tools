#!/bin/bash

# Before sourcing this file, define understood_args to be a list of arguments
# you want to be available in the environment. For example:
# understood_args=( "PATH_TO_STUFF" "ACTION_TO_TAKE" )
# ...will translate to a usage of --path-to-stuff <path-to-stuff> --action-to-take <action-to-take>

# As soon as this file is sourced, arguments are processed, and errors reported
# via return code. Use check_for_required_args to make sure certain required
# arguments were passed.

# TODO: allow for "submodule" usage
# TODO: allow for per-module descriptions in usage

# Translates --sample-arg to SAMPLE_ARG (or similar)
# Usage: <argument to translate>
function human_to_machine_arg() {
	echo "${@}" | tr '[:lower:]' '[:upper:]' | tr - _
}

# Translates SAMPLE_ARG to --sample-arg (or similar)
# Usage: <argument to translate>
function machine_to_human_arg() {
	echo "${@}" | tr '[:upper:]' '[:lower:]' | tr _ -
}

# Prints the current module's usage
function usage() {
	echo -n "Module usage: "
	for i in "${understood_args[@]}"; do
		human_i=$(machine_to_human_arg "${i}")
		echo -n "--${human_i} <${human_i}> "
	done; echo
	echo
	echo "Setting these variables in the configuration will have the same effect:"
	for i in "${understood_args[@]}"; do
		human_i=$(machine_to_human_arg "${i}")
		echo "${i}: --${human_i} <${human_i}>"
	done
	echo
	echo "Arguments take precedence over configuration."
}

while [[ "$1" != "" ]]; do
	# if the argument doesn't begin with -- or wasn't consumed by the for loop, we don't know about it
	if [[ "${1:0:2}" != "--" || "${1:2}" == "${arg}" ]]; then
		echo "Error: argument not understood: ${1}"
		usage
		return 255
	fi
	arg="${1:2}"
	machine_arg=$(human_to_machine_arg "${arg}")
	if [[ "${arg}" == "help" ]]; then
		usage
		return 255
	fi
	for ((i = 0; i < "${#understood_args[@]}"; i++)); do
		if [[ "${understood_args[$i]}" == "${machine_arg}" ]]; then
			if [[ "$2" == "" ]]; then
				echo "Error: argument ${1} requires another argument"
				return 255
			fi
			second_arg=$(echo "${2}" | sed "s|'|'"'"'"'"'"'"'|g")
			eval "${machine_arg}"'='"'${second_arg}'"
			shift 2
		fi
	done
done

# Checks to see if the given list of arguments were passed by the user.
# Usage: <arg 1> <arg 2> ...
function check_for_required_args() {
	local understood_args
	understood_args=( "${@}" )
	for i in "${understood_args[@]}"; do
		if [[ $(eval echo '${'"${i}"'}') == "" ]]; then
			echo "Error: --"$(machine_to_human_arg "${i}")" required!"
			return 255
		fi
	done
}
