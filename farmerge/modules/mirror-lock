#!/bin/bash

# Handles locking and unlocking the mirror so race conditions are eliminated
# We'd like to be able to do per-package locking, but at the moment that is not
# possible.

# Usage:
# mirror action: can be either lock or unlock.
# lock ssh uri: the user@host uri where the lock files are
# lock ssh path: /path/to/locks/ on the lock files host

# Lock will be ignored if already locked.

understood_args=( "MIRROR_ACTION" "LOCK_SSH_URI" "LOCK_SSH_PATH" ) 
source "${LIB_BASEDIR}/variable-args" || exit $?
check_for_required_args "${understood_args[@]}" || exit $?

source "${LIB_BASEDIR}/hooks"

function lock () {
	hook_opts=( exit '75-lock-'"${LOCK_SSH_URI}" "${MODULES_BASEDIR}/_exec-module" mirror-lock --mirror-action unlock --lock-ssh-uri "${LOCK_SSH_URI}" --lock-ssh-path "${LOCK_SSH_PATH}")
	add_hook "${hook_opts[@]}"; exit_code="$?"
	[[ "${exit_code}" == "254" ]] && return
	[[ "${exit_code}" != "0" ]] && return "${exit_code}"
	delete_hook exit '75-lock-'"${LOCK_SSH_URI}"

	echo "Locking mirror..."
	output="$(ssh ${LOCK_SSH_URI} '( [[ ! -d '"${LOCK_SSH_PATH}"' ]] && mkdir '"${LOCK_SSH_PATH}"' 2>/dev/null && echo '\'`uname -a`\'' > '"${LOCK_SSH_PATH}"'/host ) || echo exit code: $? uname: $(cat '"${LOCK_SSH_PATH}"'/host) 2>/dev/null' || echo local:$?)"
	if [[ -n "$output" ]]; then
		echo "Error acquiring lock:" >&2
		echo "$output" >&2
		return 1
	fi
	add_hook "${hook_opts[@]}"; exit_code="$?"

}

function unlock () {
	delete_hook exit '75-lock-'"${LOCK_SSH_URI}"; exit_code="$?"
	[[ "${exit_code}" != "254" ]] && [[ "${exit_code}" != "0" ]] && return "${exit_code}"
	
	echo "Unlocking mirror..."
	ssh "${LOCK_SSH_URI}" rm -r "${LOCK_SSH_PATH}"
	return $?
}


case "${MIRROR_ACTION}" in
	lock | unlock)
		"${MIRROR_ACTION}" || exit $?
		;;
	*)
		echo "Error: action not understood: ${MIRROR_ACTION}" >&2
		exit 255
		;;
esac
