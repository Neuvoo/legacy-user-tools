#!/bin/bash

# Handles mounting, unmounting, and launching into a chroot
# Usage:
# chroot action: can be mount, unmount, init, append_stdin, or execute.
#	mount makes sure things like /dev are mounted. /usr/portage is out of scope.
#	unmount makes sure the mount command is undone.
#	init initializes the chroot so it has a basic framework for launching
#	append_stdin is how you'd add more code to the chroot launch. Pass code via stdin.
#	execute launches the chroot
# build dir: the location of the chroot, where the building happens
# build binpkg subdir: the binpkg directory to be passed to portage
# build dist subdir: the distdir directory to be passed to portage

understood_args=( "CHROOT_ACTION" "BUILD_DIR" "BUILD_BINPKG_SUBDIR" "BUILD_DIST_SUBDIR" )
source "${LIB_BASEDIR}/variable-args" || exit $?
check_for_required_args "${understood_args[@]}" || exit $?

source "${LIB_BASEDIR}/hooks"
source "${LIB_BASEDIR}/output"

function unmount() {
	delete_hook exit '50-unmount-'"$(basename ${BUILD_DIR})"; exit_code="$?"
	[[ "${exit_code}" != "254" ]] && [[ "${exit_code}" != "0" ]] && return "${exit_code}"
	
	# Try to unmount everything, to clean up as much as possible
	some_failed="0"
	vrun umount "${BUILD_DIR}"/dev/pts || some_failed="1"
	vrun umount "${BUILD_DIR}"/dev || some_failed="1"
	vrun umount "${BUILD_DIR}"/sys || some_failed="1"
	vrun umount "${BUILD_DIR}"/proc || some_failed="1"
	
	execute_hooks "chroot-unmount" || some_failed="1"
	
	return "${some_failed}"
}

# The name is mountz internally because mount is taken
function mountz() {
	add_hook exit '50-unmount-'"$(basename ${BUILD_DIR})" "${MODULES_BASEDIR}/_exec-module" setup-chroot --chroot-action unmount --build-dir "${BUILD_DIR}" --build-binpkg-subdir "${BUILD_BINPKG_SUBDIR}" --build-dist-subdir "${BUILD_DIST_SUBDIR}"; exit_code="$?"
	[[ "${exit_code}" == "254" ]] && return
	[[ "${exit_code}" != "0" ]] && return "${exit_code}"

	vrun mount --bind /proc "${BUILD_DIR}"/proc || return $?
	vrun mount --bind /sys "${BUILD_DIR}"/sys || return $?
	vrun mount --bind /dev "${BUILD_DIR}"/dev || return $?
	vrun mount --bind /dev/pts "${BUILD_DIR}"/dev/pts || return $?
	cp -L /etc/resolv.conf "${BUILD_DIR}"/etc/ || return $?
	
	execute_hooks "chroot-mount" || return $?
}

function init() {
	mountz || return $?

	cat > "${BUILD_DIR}/chroot.run" <<EOF || return $?
#!/bin/bash
env-update && source /etc/profile
EOF

cat "${LIB_BASEDIR}/output" >> "${BUILD_DIR}/chroot.run" || return $?

cat >> "${BUILD_DIR}/chroot.run" <<EOF || return $?
export PKGDIR="${BUILD_BINPKG_SUBDIR}"
export DISTDIR="${BUILD_DIST_SUBDIR}"
export PORTAGE_BINHOST="${MIRROR_HTTP_URI}"
export USE="bindist"

# Initial setup required before any action
echo "Syncing portage..."
which layman 2>&1 > /dev/null && vrun layman -S || exit \$?
vrun emerge --sync -v # || exit \$? # squashfs-hooks messes up this exit thing. :/
echo "Resetting installed packages to the latest from the binary repository..."
vrun emerge -KGuDNv world system || exit \$?
EOF
}

function append_stdin() {
	cat >> "${BUILD_DIR}/chroot.run" || return $?
}

function execute() {
	echo "Entering chroot to launch script '${BUILD_DIR}/chroot.run'..."
	chroot "${BUILD_DIR}" /bin/bash /chroot.run || return $?
}

if [[ ! -d "${BUILD_DIR}" ]]; then
	echo "Error: build dir doesn't exist: ${BUILD_DIR}"
	exit 255
fi

case "${CHROOT_ACTION}" in
	mount)
		mountz || exit $?
		;;
	init | unmount | append_stdin | execute)
		"${CHROOT_ACTION}" || exit $?
		;;
	*)
		echo "Error: action not understood: ${CHROOT_ACTION}" >&2
		exit 255
		;;
esac
